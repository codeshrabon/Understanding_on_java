An enum is a special "class" that represents a group of constants (unchangeable variables, like final variables)

enum Level {
  LOW,
  MEDIUM,
  HIGH
}

1. Enum is short for "enumerations", which means "specifically listed".

public class Main {
  enum Level {
    LOW,
    MEDIUM,
    HIGH
  }

  public static void main(String[] args) {
    Level myVar = Level.MEDIUM; 
    System.out.println(myVar);
  }
}

Enum in a Switch Statement: 
1. Enums are often used in switch statements to check for corresponding values

enum Level {
  LOW,
  MEDIUM,
  HIGH
}

public class Main {
  public static void main(String[] args) {
    Level myVar = Level.MEDIUM;

    switch(myVar) {
      case LOW:
        System.out.println("Low level");
        break;
      case MEDIUM:
         System.out.println("Medium level");
        break;
      case HIGH:
        System.out.println("High level");
        break;
    }
  }
}

2. Loop Through an Enum
The enum type has a values() method, which returns an array of all enum constants.

for (Level myVar : Level.values()) {
  System.out.println(myVar);
}

An enum cannot be used to create objects, and it cannot extend other classes 
(but it can implement interfaces)

Why And When To Use Enums?
Use enums when you have values that you know aren't going to change,
like month days, days, colors, deck of cards, etc.
