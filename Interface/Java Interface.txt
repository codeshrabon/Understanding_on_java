1. Another way to achieve abstraction

2. An interface is a completely "abstract class" that is used to group related methods with empty bodies

3. To access the interface methods its must be "implemented" (kind of inheritance)

// Interface
interface Animal {
  public void animalSound(); // interface method (does not have a body)
  public void sleep(); // interface method (does not have a body)
}

// Pig "implements" the Animal interface
class Pig implements Animal {
  public void animalSound() {
    // The body of animalSound() is provided here
    System.out.println("The pig says: wee wee");
  }
  public void sleep() {
    // The body of sleep() is provided here
    System.out.println("Zzz");
  }
}

class Main {
  public static void main(String[] args) {
    Pig myPig = new Pig();  // Create a Pig object
    myPig.animalSound();
    myPig.sleep();
  }
}

4. Notes on Interfaces:
4.1. abstract classes, interfaces cannot be used to create objects (in the example above, 
	it is not possible to create an "Animal" object in the MyMainClass)
4.2 Interface methods are by default abstract and public
4.3. Interface attributes are by default public, static and final

5. Why And When To Use Interfaces?
5.1 To achieve security - hide certain details and only show the important details of an object (interface).
5.2 ava does not support "multiple inheritance" (a class can only inherit from one superclass).
5.3 To achieved with interfaces, because the class can implement multiple interfaces. 
5.4 o implement multiple interfaces, separate them with a comma (see example below).



